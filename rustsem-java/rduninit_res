verifying rust_tests/rv/rduninit/t10-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 3 ) , valcl ( true ) ) ) ~> #freezer#Move1_ ( #write ( #sl ( 3 ) , #uninit ( 0 ) ) ) ~> #freezer#letcl1_ ( var ( 3 ) , var ( 2 ) :=cl valcl ( 0 ) ;cl clskip ;cl clskip ) ~> clskip ;cl clskip ;cl var ( 0 ) :=cl var ( 0 ) +cl valcl ( 1 ) ;cl clskip ;cl clskip ~> #loopstart ( #loop var ( 0 ) <-cl valcl ( 10 ) { (| ifcl var ( 2 ) thencl (| letcl var ( 3 ) =cl #move ( var ( 1 ) ) incl ( var ( 2 ) :=cl valcl ( 0 ) ;cl clskip ;cl clskip ) |) elsecl (| var ( 2 ) :=cl valcl ( 1 ) ;cl clskip ;cl clskip |) ;cl clskip ;cl clskip ;cl var ( 0 ) :=cl var ( 0 ) +cl valcl ( 1 ) ;cl clskip ;cl clskip |) } ) ~> clskip ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 0 ) |-> #sl ( 2 )
        var ( 1 ) |-> #sl ( 3 )
        var ( 2 ) |-> #sl ( 4 )
      </env>
      <clstack>
        ListItem ( var ( 2 ) )
        ListItem ( var ( 0 ) |-> #sl ( 2 )
        var ( 1 ) |-> #sl ( 3 ) )
        ListItem ( var ( 1 ) )
        ListItem ( var ( 0 ) |-> #sl ( 2 ) )
        ListItem ( var ( 0 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      1
    </closureCnt>
    <funclosure>
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 0 ) =cl valcl ( 0 ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 2 ) =cl valcl ( 0 ) incl ( #loop var ( 0 ) <-cl valcl ( 10 ) { (| ifcl var ( 2 ) thencl (| letcl var ( 3 ) =cl #move ( var ( 1 ) ) incl ( var ( 2 ) :=cl valcl ( 0 ) ;cl clskip ;cl clskip ) |) elsecl (| var ( 2 ) :=cl valcl ( 1 ) ;cl clskip ;cl clskip |) ;cl clskip ;cl clskip ;cl var ( 0 ) :=cl var ( 0 ) +cl valcl ( 1 ) ;cl clskip ;cl clskip |) } ;cl clskip ) |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      6
    </slocAddr>
    <sloc>
      2 |-> valcl ( 3 )
      3 |-> #uninit ( 0 )
      4 |-> valcl ( 1 )
    </sloc>
    <blkAddr>
      2
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 5 ) )
      SetItem ( #lread ( #sl ( 2 ) , 8 ) )
      SetItem ( #lread ( #sl ( 2 ) , 10 ) )
      SetItem ( #lread ( #sl ( 2 ) , 16 ) )
      SetItem ( #lread ( #sl ( 2 ) , 18 ) )
      SetItem ( #lread ( #sl ( 2 ) , 21 ) )
      SetItem ( #lread ( #sl ( 2 ) , 23 ) )
      SetItem ( #lread ( #sl ( 3 ) , 12 ) )
      SetItem ( #lread ( #sl ( 3 ) , 25 ) )
      SetItem ( #lread ( #sl ( 4 ) , 6 ) )
      SetItem ( #lread ( #sl ( 4 ) , 11 ) )
      SetItem ( #lread ( #sl ( 4 ) , 19 ) )
      SetItem ( #lread ( #sl ( 4 ) , 24 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 9 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 17 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 22 ) )
      SetItem ( #lwrite ( #sl ( 3 ) , 13 ) )
      SetItem ( #lwrite ( #sl ( 4 ) , 7 ) )
      SetItem ( #lwrite ( #sl ( 4 ) , 15 ) )
      SetItem ( #lwrite ( #sl ( 4 ) , 20 ) )
    </locRW>
    <memStatus>
      #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
      #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
      #sl ( 2 ) |-> #ms ( 0 , 0 )
      #sl ( 3 ) |-> #ms ( 0 , 0 )
      #sl ( 4 ) |-> #ms ( 0 , 0 )
      #sl ( 5 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      25
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t10-spec.k"
	User time (seconds): 35.74
	System time (seconds): 0.72
	Percent of CPU this job got: 200%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.19
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 824324
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 386614
	Voluntary context switches: 10895
	Involuntary context switches: 798
	Swaps: 0
	File system inputs: 0
	File system outputs: 129032
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t11-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#Move1_ ( #write ( #sl ( 2 ) , #uninit ( 0 ) ) ) ~> #freezer#letcl1_ ( var ( 2 ) , clskip ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 0 ) |-> #sl ( 2 )
      </env>
      <clstack>
        ListItem ( var ( 0 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      1
    </closureCnt>
    <funclosure>
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 0 ) =cl #uninit ( 0 ) incl ( ifcl valcl ( 0 ) thencl (| letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl ( var ( 0 ) :=cl #move ( var ( 1 ) ) ;cl clskip ;cl clskip ) |) elsecl (| clskip |) ;cl clskip ;cl clskip ;cl letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl clskip ) |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      3
    </slocAddr>
    <sloc>
      2 |-> #uninit ( 0 )
    </sloc>
    <blkAddr>
      1
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 1 ) )
    </locRW>
    <memStatus>
      #sl ( 2 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      1
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t11-spec.k"
	User time (seconds): 35.28
	System time (seconds): 0.63
	Percent of CPU this job got: 203%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:17.65
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 817748
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 383023
	Voluntary context switches: 10759
	Involuntary context switches: 695
	Swaps: 0
	File system inputs: 0
	File system outputs: 134744
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t12-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 1 ) |-> #sl ( 2 )
        </env>
        <clstack>
          ListItem ( var ( 1 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        2
      </closureCnt>
      <funclosure>
        main |-> 0
        moveV |-> 1
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl ( callcl ( moveV , #move ( var ( 1 ) ) , .ExpCLs ) ;cl clskip ;cl #print ( "{}" , #Index ( var ( 1 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure> <closure>
        <crId>
          1
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          var ( 0 ) , .Idents
        </crParams>
        <crBody>
          (| clskip |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        6
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 1 ) |-> #sl ( 2 )
        </env>
        <clstack>
          ListItem ( var ( 1 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        2
      </closureCnt>
      <funclosure>
        main |-> 0
        moveV |-> 1
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl ( callcl ( moveV , #move ( var ( 1 ) ) , .ExpCLs ) ;cl clskip ;cl #print ( "{}" , #Index ( var ( 1 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure> <closure>
        <crId>
          1
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          var ( 0 ) , .Idents
        </crParams>
        <crBody>
          (| clskip |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        6
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t12-spec.k"
	User time (seconds): 33.72
	System time (seconds): 0.70
	Percent of CPU this job got: 189%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.20
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 894668
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 385712
	Voluntary context switches: 11405
	Involuntary context switches: 787
	Swaps: 0
	File system inputs: 0
	File system outputs: 134744
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t13-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 4 ) |-> #sl ( 3 )
        </env>
        <clstack>
          ListItem ( var ( 4 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        2
      </closureCnt>
      <funclosure>
        funId ( 0 ) |-> 1
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 4 ) =cl #AllocateInitRaw ( valcl ( 2 ) , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) , #AllocateInit ( valcl ( 1 ) , #IdTy ( #env ( 0 ) , #prod ( #fd ( b , #owner ( #array ( i32 , 2 ) ) ) , .Fields ) ) , #move ( var ( 0 ) ) , .ExpCLs ) , fun funId ( 0 ) ( var ( 1 ) , .Idents ) { letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 ) } , .ValueCLs ) incl ( #print ( "{}" , callcl ( var ( 4 ) .cl valcl ( 1 ) , var ( 4 ) .cl valcl ( 0 ) , .ExpCLs ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure> <closure>
        <crId>
          1
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          var ( 1 ) , .Idents
        </crParams>
        <crBody>
          letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 )
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #Raw ( #heap ( 3 , 0 ) )
      </sloc>
      <blkAddr>
        4
      </blkAddr>
      <blocks>
        #heap ( 3 , 0 ) |-> #own ( #blk ( 2 ) )
        #heap ( 3 , 1 ) |-> cr ( 1 )
        3 |-> #blkInfo ( 2 , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 18 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 0 ) , 9 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 1 ) , 10 ) )
        SetItem ( #lread ( #sl ( 4 ) . valcl ( 0 ) , 12 ) )
        SetItem ( #lread ( #sl ( 5 ) , 15 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 4 ) . valcl ( 0 ) , 13 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 16 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        18
      </clk>
    </memory>
    <output>
      ListItem ( "1" )
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 4 ) |-> #sl ( 3 )
        </env>
        <clstack>
          ListItem ( var ( 4 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        2
      </closureCnt>
      <funclosure>
        funId ( 0 ) |-> 1
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 4 ) =cl #AllocateInitRaw ( valcl ( 2 ) , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) , #AllocateInit ( valcl ( 1 ) , #IdTy ( #env ( 0 ) , #prod ( #fd ( b , #owner ( #array ( i32 , 2 ) ) ) , .Fields ) ) , #move ( var ( 0 ) ) , .ExpCLs ) , fun funId ( 0 ) ( var ( 1 ) , .Idents ) { letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 ) } , .ValueCLs ) incl ( #print ( "{}" , callcl ( var ( 4 ) .cl valcl ( 1 ) , var ( 4 ) .cl valcl ( 0 ) , .ExpCLs ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure> <closure>
        <crId>
          1
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          var ( 1 ) , .Idents
        </crParams>
        <crBody>
          letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 )
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #Raw ( #heap ( 3 , 0 ) )
      </sloc>
      <blkAddr>
        4
      </blkAddr>
      <blocks>
        #heap ( 3 , 0 ) |-> #own ( #blk ( 2 ) )
        #heap ( 3 , 1 ) |-> cr ( 1 )
        3 |-> #blkInfo ( 2 , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 18 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 0 ) , 10 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 1 ) , 9 ) )
        SetItem ( #lread ( #sl ( 4 ) . valcl ( 0 ) , 12 ) )
        SetItem ( #lread ( #sl ( 5 ) , 15 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 4 ) . valcl ( 0 ) , 13 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 16 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        18
      </clk>
    </memory>
    <output>
      ListItem ( "1" )
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 4 ) |-> #sl ( 3 )
        </env>
        <clstack>
          ListItem ( var ( 4 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        2
      </closureCnt>
      <funclosure>
        funId ( 0 ) |-> 1
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 4 ) =cl #AllocateInitRaw ( valcl ( 2 ) , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) , #AllocateInit ( valcl ( 1 ) , #IdTy ( #env ( 0 ) , #prod ( #fd ( b , #owner ( #array ( i32 , 2 ) ) ) , .Fields ) ) , #move ( var ( 0 ) ) , .ExpCLs ) , fun funId ( 0 ) ( var ( 1 ) , .Idents ) { letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 ) } , .ValueCLs ) incl ( #print ( "{}" , callcl ( var ( 4 ) .cl valcl ( 1 ) , var ( 4 ) .cl valcl ( 0 ) , .ExpCLs ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure> <closure>
        <crId>
          1
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          var ( 1 ) , .Idents
        </crParams>
        <crBody>
          letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 )
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #Raw ( #heap ( 3 , 0 ) )
      </sloc>
      <blkAddr>
        4
      </blkAddr>
      <blocks>
        #heap ( 3 , 0 ) |-> #own ( #blk ( 2 ) )
        #heap ( 3 , 1 ) |-> cr ( 1 )
        3 |-> #blkInfo ( 2 , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 18 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 0 ) , 9 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 1 ) , 10 ) )
        SetItem ( #lread ( #sl ( 4 ) . valcl ( 0 ) , 12 ) )
        SetItem ( #lread ( #sl ( 5 ) , 15 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 4 ) . valcl ( 0 ) , 13 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 16 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        18
      </clk>
    </memory>
    <output>
      ListItem ( "1" )
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 4 ) |-> #sl ( 3 )
        </env>
        <clstack>
          ListItem ( var ( 4 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        2
      </closureCnt>
      <funclosure>
        funId ( 0 ) |-> 1
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 4 ) =cl #AllocateInitRaw ( valcl ( 2 ) , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) , #AllocateInit ( valcl ( 1 ) , #IdTy ( #env ( 0 ) , #prod ( #fd ( b , #owner ( #array ( i32 , 2 ) ) ) , .Fields ) ) , #move ( var ( 0 ) ) , .ExpCLs ) , fun funId ( 0 ) ( var ( 1 ) , .Idents ) { letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 ) } , .ValueCLs ) incl ( #print ( "{}" , callcl ( var ( 4 ) .cl valcl ( 1 ) , var ( 4 ) .cl valcl ( 0 ) , .ExpCLs ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure> <closure>
        <crId>
          1
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          var ( 1 ) , .Idents
        </crParams>
        <crBody>
          letcl var ( 2 ) =cl #move ( var ( 1 ) .cl valcl ( 0 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl valcl ( 1 )
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #Raw ( #heap ( 3 , 0 ) )
      </sloc>
      <blkAddr>
        4
      </blkAddr>
      <blocks>
        #heap ( 3 , 0 ) |-> #own ( #blk ( 2 ) )
        #heap ( 3 , 1 ) |-> cr ( 1 )
        3 |-> #blkInfo ( 2 , #owner ( #closureTy ( #envId ( 0 ) , fnTy ( .CoreTys ) -> i32 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 18 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 0 ) , 10 ) )
        SetItem ( #lread ( #sl ( 3 ) . valcl ( 1 ) , 9 ) )
        SetItem ( #lread ( #sl ( 4 ) . valcl ( 0 ) , 12 ) )
        SetItem ( #lread ( #sl ( 5 ) , 15 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 4 ) . valcl ( 0 ) , 13 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 16 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        18
      </clk>
    </memory>
    <output>
      ListItem ( "1" )
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t13-spec.k"
	User time (seconds): 38.31
	System time (seconds): 0.76
	Percent of CPU this job got: 205%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.99
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 839096
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 373938
	Voluntary context switches: 11737
	Involuntary context switches: 857
	Swaps: 0
	File system inputs: 0
	File system outputs: 134768
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t14-spec.k:
          
[Error] Compiler: Had 1 parsing errors.
[Error] Inner Parser: Parse error: unexpected token ','.
	Source(/home/ksl/workspace/RustSEM/Rust-Semantics/rustsem-java/rust_tests/rv/rduninit/t14-spec.k)
	Location(14,120,14,121)
Command exited with non-zero status 113
	Command being timed: "./clkprove rust_tests/rv/rduninit/t14-spec.k"
	User time (seconds): 14.17
	System time (seconds): 0.52
	Percent of CPU this job got: 168%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:08.70
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 687828
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 328399
	Voluntary context switches: 6760
	Involuntary context switches: 312
	Swaps: 0
	File system inputs: 0
	File system outputs: 134744
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 113
verifying rust_tests/rv/rduninit/t15-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#Move1_ ( #write ( #sl ( 2 ) , #uninit ( 0 ) ) ) ~> #freezer#letcl1_ ( var ( 2 ) , clskip ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 1 ) |-> #sl ( 2 )
      </env>
      <clstack>
        ListItem ( var ( 1 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      2
    </closureCnt>
    <funclosure>
      #cpath ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , f ) |-> 1
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl ( callcl ( #cpath ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , f ) , #move ( var ( 1 ) ) , .ExpCLs ) ;cl clskip ;cl letcl var ( 2 ) =cl #move ( var ( 1 ) ) incl clskip ) |)
      </crBody>
    </closure> <closure>
      <crId>
        1
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        var ( 0 ) , .Idents
      </crParams>
      <crBody>
        (| clskip |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      4
    </slocAddr>
    <sloc>
      2 |-> #uninit ( 0 )
    </sloc>
    <blkAddr>
      2
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 2 ) )
      SetItem ( #lread ( #sl ( 2 ) , 5 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 3 ) )
    </locRW>
    <memStatus>
      #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
      #sl ( 2 ) |-> #ms ( 0 , 0 )
      #sl ( 3 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      5
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t15-spec.k"
	User time (seconds): 35.52
	System time (seconds): 0.70
	Percent of CPU this job got: 200%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.04
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 777148
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 363182
	Voluntary context switches: 10922
	Involuntary context switches: 786
	Swaps: 0
	File system inputs: 8
	File system outputs: 134768
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t16-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> clskip ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
        </env>
        <clstack>
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        0
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #RawCL ( refcl ( 0 , var ( 0 ) ) ) incl letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl ( #print ( "{}" , *cl na var ( 1 ) , .ExpCLs ) ;cl clskip ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        5
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #Raw ( #sl ( 2 ) )
        4 |-> #own ( #blk ( 1 ) )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V0 )
        #heap ( 1 , 1 ) |-> valcl ( V1 )
        1 |-> #blkInfo ( 2 , #owner ( #array ( i32 , 2 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 4 ) )
        SetItem ( #lread ( #sl ( 3 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 5 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        7
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> clskip ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
        </env>
        <clstack>
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        0
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #RawCL ( refcl ( 0 , var ( 0 ) ) ) incl letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl ( #print ( "{}" , *cl na var ( 1 ) , .ExpCLs ) ;cl clskip ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        5
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #Raw ( #sl ( 2 ) )
        4 |-> #own ( #blk ( 1 ) )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V0 )
        #heap ( 1 , 1 ) |-> valcl ( V1 )
        1 |-> #blkInfo ( 2 , #owner ( #array ( i32 , 2 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 4 ) )
        SetItem ( #lread ( #sl ( 3 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 5 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        7
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t16-spec.k"
	User time (seconds): 34.61
	System time (seconds): 0.64
	Percent of CPU this job got: 193%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.26
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 913320
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 392109
	Voluntary context switches: 10810
	Involuntary context switches: 976
	Swaps: 0
	File system inputs: 0
	File system outputs: 134792
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t17-spec.k:
          
[Error] Compiler: Had 1 parsing errors.
[Error] Inner Parser: Parse error: unexpected token ')'.
	Source(/home/ksl/workspace/RustSEM/Rust-Semantics/rustsem-java/rust_tests/rv/rduninit/t17-spec.k)
	Location(14,330,14,331)
Command exited with non-zero status 113
	Command being timed: "./clkprove rust_tests/rv/rduninit/t17-spec.k"
	User time (seconds): 14.85
	System time (seconds): 0.50
	Percent of CPU this job got: 168%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.11
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 723160
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 338750
	Voluntary context switches: 6807
	Involuntary context switches: 876
	Swaps: 0
	File system inputs: 0
	File system outputs: 134808
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 113
verifying rust_tests/rv/rduninit/t18-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #Read ( #pair ( #sl ( 3 ) , valcl ( false ) ) ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
        </env>
        <clstack>
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        0
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #uninit ( 0 ) incl ( (| letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl ( var ( 0 ) :=cl refcl ( 0 , var ( 1 ) ) ;cl clskip ;cl clskip ) |) ;cl #print ( "{}" , *cl na var ( 0 ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        2 |-> #shr ( 4 , 5 , #sl ( 3 ) )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 5 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        5
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #Read ( #pair ( #sl ( 3 ) , valcl ( false ) ) ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
        </env>
        <clstack>
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        0
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #uninit ( 0 ) incl ( (| letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl ( var ( 0 ) :=cl refcl ( 0 , var ( 1 ) ) ;cl clskip ;cl clskip ) |) ;cl #print ( "{}" , *cl na var ( 0 ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        2 |-> #shr ( 4 , 5 , #sl ( 3 ) )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 5 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        5
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t18-spec.k"
	User time (seconds): 36.68
	System time (seconds): 0.67
	Percent of CPU this job got: 198%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.80
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 839880
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 394466
	Voluntary context switches: 10690
	Involuntary context switches: 3440
	Swaps: 0
	File system inputs: 0
	File system outputs: 134832
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t19-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#Move1_ ( #write ( #sl ( 2 ) , #uninit ( 0 ) ) ) ~> #freezer#letcl1_ ( var ( 2 ) , var ( 1 ) :=cl var ( 1 ) -cl valcl ( 1 ) ;cl clskip ;cl clskip ) ~> #loopstart ( #loop var ( 1 ) >=cl valcl ( 0 ) { (| letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl ( var ( 1 ) :=cl var ( 1 ) -cl valcl ( 1 ) ;cl clskip ;cl clskip ) |) } ) ~> clskip ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 0 ) |-> #sl ( 2 )
        var ( 1 ) |-> #sl ( 3 )
      </env>
      <clstack>
        ListItem ( var ( 1 ) )
        ListItem ( var ( 0 ) |-> #sl ( 2 ) )
        ListItem ( var ( 0 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      1
    </closureCnt>
    <funclosure>
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl valcl ( 8 ) incl ( #loop var ( 1 ) >=cl valcl ( 0 ) { (| letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl ( var ( 1 ) :=cl var ( 1 ) -cl valcl ( 1 ) ;cl clskip ;cl clskip ) |) } ;cl clskip ) |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      5
    </slocAddr>
    <sloc>
      2 |-> #uninit ( 0 )
      3 |-> valcl ( 7 )
    </sloc>
    <blkAddr>
      2
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 5 ) )
      SetItem ( #lread ( #sl ( 2 ) , 11 ) )
      SetItem ( #lread ( #sl ( 3 ) , 4 ) )
      SetItem ( #lread ( #sl ( 3 ) , 8 ) )
      SetItem ( #lread ( #sl ( 3 ) , 10 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 6 ) )
      SetItem ( #lwrite ( #sl ( 3 ) , 9 ) )
    </locRW>
    <memStatus>
      #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
      #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
      #sl ( 2 ) |-> #ms ( 0 , 0 )
      #sl ( 3 ) |-> #ms ( 0 , 0 )
      #sl ( 4 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      11
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t19-spec.k"
	User time (seconds): 33.57
	System time (seconds): 0.67
	Percent of CPU this job got: 190%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:17.99
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 877868
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 382844
	Voluntary context switches: 11010
	Involuntary context switches: 864
	Swaps: 0
	File system inputs: 0
	File system outputs: 134848
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t1-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#letcl1_ ( var ( 1 ) , clskip ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 0 ) |-> #sl ( 2 )
      </env>
      <clstack>
        ListItem ( var ( 0 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      1
    </closureCnt>
    <funclosure>
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 0 ) =cl #uninit ( 0 ) incl letcl var ( 1 ) =cl var ( 0 ) incl clskip |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      3
    </slocAddr>
    <sloc>
      2 |-> #uninit ( 0 )
    </sloc>
    <blkAddr>
      1
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 1 ) )
    </locRW>
    <memStatus>
      #sl ( 2 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      1
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t1-spec.k"
	User time (seconds): 33.82
	System time (seconds): 0.71
	Percent of CPU this job got: 196%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:17.57
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 860136
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 389219
	Voluntary context switches: 10632
	Involuntary context switches: 693
	Swaps: 0
	File system inputs: 0
	File system outputs: 134864
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t20-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #print ( "{}" , #Index ( var ( 1 ) , valcl ( 0 ) ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 2 ) , valcl ( 0 ) ) , .ExpCLs ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 3 ) |-> #sl ( 5 )
        </env>
        <clstack>
          ListItem ( var ( 3 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #move ( var ( 0 ) ) incl letcl var ( 2 ) =cl #move ( var ( 1 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl ( #print ( "{}" , #Index ( var ( 0 ) , valcl ( 0 ) ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 1 ) , valcl ( 0 ) ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 2 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        6
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 1 ) )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V0 )
        #heap ( 1 , 1 ) |-> valcl ( V1 )
        1 |-> #blkInfo ( 2 , #owner ( #array ( i32 , 2 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 12 ) )
        SetItem ( #lread ( #sl ( 3 ) , 6 ) )
        SetItem ( #lread ( #sl ( 4 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 10 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        12
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #print ( "{}" , #Index ( var ( 1 ) , valcl ( 0 ) ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 2 ) , valcl ( 0 ) ) , .ExpCLs ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 3 ) |-> #sl ( 5 )
        </env>
        <clstack>
          ListItem ( var ( 3 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #move ( var ( 0 ) ) incl letcl var ( 2 ) =cl #move ( var ( 1 ) ) incl letcl var ( 3 ) =cl #move ( var ( 2 ) ) incl ( #print ( "{}" , #Index ( var ( 0 ) , valcl ( 0 ) ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 1 ) , valcl ( 0 ) ) , .ExpCLs ) ;cl #print ( "{}" , #Index ( var ( 2 ) , valcl ( 0 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        6
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 1 ) )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V0 )
        #heap ( 1 , 1 ) |-> valcl ( V1 )
        1 |-> #blkInfo ( 2 , #owner ( #array ( i32 , 2 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 3 ) )
        SetItem ( #lread ( #sl ( 2 ) , 12 ) )
        SetItem ( #lread ( #sl ( 3 ) , 6 ) )
        SetItem ( #lread ( #sl ( 4 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 10 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        12
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t20-spec.k"
	User time (seconds): 34.62
	System time (seconds): 0.65
	Percent of CPU this job got: 194%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.13
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 805824
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 367443
	Voluntary context switches: 10883
	Involuntary context switches: 836
	Swaps: 0
	File system inputs: 0
	File system outputs: 134896
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t21-spec.k:
          
#True
	Command being timed: "./clkprove rust_tests/rv/rduninit/t21-spec.k"
	User time (seconds): 37.04
	System time (seconds): 0.63
	Percent of CPU this job got: 197%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:19.05
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 776032
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 356819
	Voluntary context switches: 11704
	Involuntary context switches: 1692
	Swaps: 0
	File system inputs: 0
	File system outputs: 134888
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
verifying rust_tests/rv/rduninit/t22-spec.k:
          
#True
	Command being timed: "./clkprove rust_tests/rv/rduninit/t22-spec.k"
	User time (seconds): 32.17
	System time (seconds): 0.64
	Percent of CPU this job got: 185%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:17.70
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 843908
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 373488
	Voluntary context switches: 11241
	Involuntary context switches: 911
	Swaps: 0
	File system inputs: 0
	File system outputs: 134912
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
verifying rust_tests/rv/rduninit/t2-spec.k:
          
[Error] Compiler: Had 1 parsing errors.
[Error] Inner Parser: Parse error: unexpected token ','.
	Source(/home/ksl/workspace/RustSEM/Rust-Semantics/rustsem-java/rust_tests/rv/rduninit/t2-spec.k)
	Location(14,255,14,256)
Command exited with non-zero status 113
	Command being timed: "./clkprove rust_tests/rv/rduninit/t2-spec.k"
	User time (seconds): 14.21
	System time (seconds): 0.43
	Percent of CPU this job got: 168%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:08.67
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 698744
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 330951
	Voluntary context switches: 6682
	Involuntary context switches: 329
	Swaps: 0
	File system inputs: 0
	File system outputs: 134920
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 113
verifying rust_tests/rv/rduninit/t3-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #unit
        </k>
        <env>
          .Map
        </env>
        <clstack>
          .List
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 5 ) , #owner ( #array ( i32 , 5 ) ) , valcl ( V0 ) , valcl ( V1 ) , valcl ( V2 ) , valcl ( V3 ) , valcl ( V4 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #Index ( var ( 0 ) , valcl ( 2 ) ) incl #print ( "{},{}" , #Index ( var ( 0 ) , valcl ( 2 ) ) , var ( 1 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        .Map
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lread ( #sl ( 2 ) , 8 ) )
        SetItem ( #lread ( #sl ( 3 ) , 9 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 2 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 3 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 4 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        10
      </clk>
    </memory>
    <output>
      ListItem ( replaceFirst ( "" +String Int2String ( V2 ) +String ",{}" , "{}" , Int2String ( V2 ) ) )
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #unit
        </k>
        <env>
          .Map
        </env>
        <clstack>
          .List
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 5 ) , #owner ( #array ( i32 , 5 ) ) , valcl ( V0 ) , valcl ( V1 ) , valcl ( V2 ) , valcl ( V3 ) , valcl ( V4 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #Index ( var ( 0 ) , valcl ( 2 ) ) incl #print ( "{},{}" , #Index ( var ( 0 ) , valcl ( 2 ) ) , var ( 1 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        .Map
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lread ( #sl ( 2 ) , 9 ) )
        SetItem ( #lread ( #sl ( 3 ) , 8 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 2 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 3 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 4 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        10
      </clk>
    </memory>
    <output>
      ListItem ( replaceFirst ( "" +String Int2String ( V2 ) +String ",{}" , "{}" , Int2String ( V2 ) ) )
    </output>
  </T>
[Warning] Critical: missing SMTLib translation for findString (missing SMTLib
translation for findString)
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t3-spec.k"
	User time (seconds): 45.59
	System time (seconds): 0.77
	Percent of CPU this job got: 183%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.26
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1131880
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 447030
	Voluntary context switches: 12207
	Involuntary context switches: 964
	Swaps: 0
	File system inputs: 0
	File system outputs: 134960
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t4-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lread ( #sl ( 3 ) , 8 ) )
        SetItem ( #lread ( #sl ( 4 ) , 10 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lread ( #sl ( 3 ) , 10 ) )
        SetItem ( #lread ( #sl ( 4 ) , 8 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 10 ) )
        SetItem ( #lread ( #sl ( 3 ) , 6 ) )
        SetItem ( #lread ( #sl ( 4 ) , 8 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 10 ) )
        SetItem ( #lread ( #sl ( 3 ) , 8 ) )
        SetItem ( #lread ( #sl ( 4 ) , 6 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lread ( #sl ( 3 ) , 8 ) )
        SetItem ( #lread ( #sl ( 4 ) , 10 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 6 ) )
        SetItem ( #lread ( #sl ( 3 ) , 10 ) )
        SetItem ( #lread ( #sl ( 4 ) , 8 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 10 ) )
        SetItem ( #lread ( #sl ( 3 ) , 6 ) )
        SetItem ( #lread ( #sl ( 4 ) , 8 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #heap ( 4 , 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 0 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 )
          var ( 6 ) |-> #sl ( 6 )
        </env>
        <clstack>
          ListItem ( var ( 6 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 )
          var ( 5 ) |-> #sl ( 5 ) )
          ListItem ( var ( 5 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
          var ( 2 ) |-> #sl ( 4 ) )
          ListItem ( var ( 2 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 ) )
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V2 ) , .ExpCLs ) incl letcl var ( 2 ) =cl #AllocateInit ( valcl ( 1 ) , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) , valcl ( V3 ) , .ExpCLs ) incl letcl var ( 5 ) =cl #AllocateInit ( valcl ( 4 ) , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) , #move ( var ( 0 ) ) , #move ( var ( 1 ) ) , #move ( var ( 2 ) ) , .ExpCLs ) incl letcl var ( 6 ) =cl #move ( #Index ( var ( 5 ) , valcl ( 2 ) ) ) incl #print ( "{}" , #Index ( var ( 5 ) , valcl ( 2 ) ) .cl valcl ( 0 ) , .ExpCLs ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        7
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> #uninit ( 0 )
        4 |-> #uninit ( 0 )
        5 |-> #own ( #blk ( 4 ) )
        6 |-> #own ( #blk ( 3 ) )
      </sloc>
      <blkAddr>
        5
      </blkAddr>
      <blocks>
        #heap ( 1 , 0 ) |-> valcl ( V1 )
        #heap ( 2 , 0 ) |-> valcl ( V2 )
        #heap ( 3 , 0 ) |-> valcl ( V3 )
        #heap ( 4 , 0 ) |-> #own ( #blk ( 1 ) )
        #heap ( 4 , 1 ) |-> #own ( #blk ( 2 ) )
        #heap ( 4 , 2 ) |-> #uninit ( 0 )
        #heap ( 4 , 3 ) |-> #uninit ( 0 )
        1 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        2 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        3 |-> #blkInfo ( 1 , #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) )
        4 |-> #blkInfo ( 4 , #owner ( #array ( #owner ( #IdTy ( V0 , #prod ( #fd ( a , i32 ) , .Fields ) ) ) , 5 ) ) )
      </blocks>
      <locRW>
        SetItem ( #lread ( #route ( #PArray ( #sl ( 5 ) , valcl ( 2 ) ) . valcl ( 0 ) ) , 19 ) )
        SetItem ( #lread ( #sl ( 2 ) , 10 ) )
        SetItem ( #lread ( #sl ( 3 ) , 8 ) )
        SetItem ( #lread ( #sl ( 4 ) , 6 ) )
        SetItem ( #lread ( #sl ( 5 ) , 16 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 11 ) )
        SetItem ( #lwrite ( #sl ( 3 ) , 9 ) )
        SetItem ( #lwrite ( #sl ( 4 ) , 7 ) )
        SetItem ( #lwrite ( #sl ( 5 ) , 17 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 2 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 3 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 1 ) |-> #ms ( 0 , 0 )
        #heap ( 4 , 2 ) |-> #ms ( 1 , 0 )
        #heap ( 4 , 3 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
        #sl ( 5 ) |-> #ms ( 0 , 0 )
        #sl ( 6 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        19
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t4-spec.k"
	User time (seconds): 45.73
	System time (seconds): 0.67
	Percent of CPU this job got: 198%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.36
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 862772
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 376174
	Voluntary context switches: 12686
	Involuntary context switches: 871
	Swaps: 0
	File system inputs: 0
	File system outputs: 135016
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t5-spec.k:
          
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 1 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ExpCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
        </env>
        <clstack>
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( 1 ) , valcl ( V0 ) , .ExpCLs ) incl letcl var ( 1 ) =cl valcl ( 1 ) incl ( ifcl var ( 1 ) ==cl valcl ( 1 ) thencl (| clskip |) elsecl (| letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl clskip |) ;cl clskip ;cl clskip ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 1 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        5
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> valcl ( 1 )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 5 ) )
        SetItem ( #lread ( #sl ( 2 ) , 8 ) )
        SetItem ( #lread ( #sl ( 3 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 6 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        8
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #readnap ( #sl ( 2 ) ) ~> #freezer#rdLVfield1_ ( valcl ( true ) , valcl ( 1 ) ) ~> #freezer#Read0_ ( ) ~> #freezer#ExpCLs1_ ( .ValueCLs ) ~> #freezer#print0_ ( "{}" ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
        </k>
        <env>
          var ( 0 ) |-> #sl ( 2 )
          var ( 1 ) |-> #sl ( 3 )
        </env>
        <clstack>
          ListItem ( var ( 1 ) )
          ListItem ( var ( 0 ) |-> #sl ( 2 ) )
          ListItem ( var ( 0 ) )
          ListItem ( .Map )
          ListItem ( #state ( . , .Map ) )
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( 1 ) , valcl ( V0 ) , .ExpCLs ) incl letcl var ( 1 ) =cl valcl ( 1 ) incl ( ifcl var ( 1 ) ==cl valcl ( 1 ) thencl (| clskip |) elsecl (| letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl clskip |) ;cl clskip ;cl clskip ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 1 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        5
      </slocAddr>
      <sloc>
        2 |-> #uninit ( 0 )
        3 |-> valcl ( 1 )
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 5 ) )
        SetItem ( #lread ( #sl ( 2 ) , 8 ) )
        SetItem ( #lread ( #sl ( 3 ) , 4 ) )
        SetItem ( #lwrite ( #sl ( 2 ) , 6 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 1 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
        #sl ( 4 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        8
      </clk>
    </memory>
    <output>
      .List
    </output>
  </T>
#And
  <T>
    <threads>
      <Thread>
        <threadId>
          0
        </threadId>
        <tname>
          "main"
        </tname>
        <k>
          #unit
        </k>
        <env>
          .Map
        </env>
        <clstack>
          .List
        </clstack>
      </Thread>
      <activeThreads>
        SetItem ( 0 )
      </activeThreads>
      <cntThreads>
        1
      </cntThreads>
      <cthread>
        -1
      </cthread>
    </threads>
    <closures>
      <closureCnt>
        1
      </closureCnt>
      <funclosure>
        main |-> 0
      </funclosure>
      <closure>
        <crId>
          0
        </crId>
        <crContext>
          .
        </crContext>
        <crParams>
          .Idents
        </crParams>
        <crBody>
          (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V1 ) , valcl ( V0 ) , .ExpCLs ) incl letcl var ( 1 ) =cl valcl ( V1 ) incl ( ifcl var ( 1 ) ==cl valcl ( 1 ) thencl (| clskip |) elsecl (| letcl var ( 2 ) =cl #move ( var ( 0 ) ) incl clskip |) ;cl clskip ;cl clskip ;cl #print ( "{}" , #Index ( var ( 0 ) , valcl ( 1 ) ) , .ExpCLs ) ) |)
        </crBody>
      </closure>
    </closures>
    <memory>
      <slocAddr>
        4
      </slocAddr>
      <sloc>
        .Map
      </sloc>
      <blkAddr>
        2
      </blkAddr>
      <blocks>
        .Map
      </blocks>
      <locRW>
        SetItem ( #lread ( #sl ( 2 ) , 5 ) )
        SetItem ( #lread ( #sl ( 3 ) , 4 ) )
      </locRW>
      <memStatus>
        #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
        #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
        #sl ( 2 ) |-> #ms ( 0 , 0 )
        #sl ( 3 ) |-> #ms ( 0 , 0 )
      </memStatus>
      <clk>
        6
      </clk>
    </memory>
    <output>
      ListItem ( "" +String Int2String ( V0 ) +String "" )
    </output>
  </T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t5-spec.k"
	User time (seconds): 35.40
	System time (seconds): 0.66
	Percent of CPU this job got: 196%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.40
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 867884
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 383827
	Voluntary context switches: 11658
	Involuntary context switches: 935
	Swaps: 0
	File system inputs: 0
	File system outputs: 140664
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t6-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 3 ) , valcl ( true ) ) ) ~> #freezer#Move1_ ( #write ( #sl ( 3 ) , #uninit ( 0 ) ) ) ~> #freezer#letcl1_ ( var ( 2 ) , var ( 0 ) :=cl var ( 0 ) +cl valcl ( 1 ) ;cl clskip ;cl clskip ) ~> #loopstart ( #loop var ( 0 ) <=cl valcl ( 10 ) { (| letcl var ( 2 ) =cl #move ( var ( 1 ) ) incl ( var ( 0 ) :=cl var ( 0 ) +cl valcl ( 1 ) ;cl clskip ;cl clskip ) |) } ) ~> clskip ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 0 ) |-> #sl ( 2 )
        var ( 1 ) |-> #sl ( 3 )
      </env>
      <clstack>
        ListItem ( var ( 1 ) )
        ListItem ( var ( 0 ) |-> #sl ( 2 ) )
        ListItem ( var ( 0 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      1
    </closureCnt>
    <funclosure>
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 0 ) =cl valcl ( 0 ) incl letcl var ( 1 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl ( #loop var ( 0 ) <=cl valcl ( 10 ) { (| letcl var ( 2 ) =cl #move ( var ( 1 ) ) incl ( var ( 0 ) :=cl var ( 0 ) +cl valcl ( 1 ) ;cl clskip ;cl clskip ) |) } ;cl clskip ) |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      5
    </slocAddr>
    <sloc>
      2 |-> valcl ( 1 )
      3 |-> #uninit ( 0 )
    </sloc>
    <blkAddr>
      2
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 4 ) )
      SetItem ( #lread ( #sl ( 2 ) , 8 ) )
      SetItem ( #lread ( #sl ( 2 ) , 10 ) )
      SetItem ( #lread ( #sl ( 3 ) , 5 ) )
      SetItem ( #lread ( #sl ( 3 ) , 11 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 9 ) )
      SetItem ( #lwrite ( #sl ( 3 ) , 6 ) )
    </locRW>
    <memStatus>
      #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
      #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
      #sl ( 2 ) |-> #ms ( 0 , 0 )
      #sl ( 3 ) |-> #ms ( 0 , 0 )
      #sl ( 4 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      11
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t6-spec.k"
	User time (seconds): 35.51
	System time (seconds): 0.69
	Percent of CPU this job got: 196%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.46
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 854032
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 393577
	Voluntary context switches: 11415
	Involuntary context switches: 870
	Swaps: 0
	File system inputs: 0
	File system outputs: 146344
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t7-spec.k:
          
<T>
  <threads>
    <Thread>
      <threadId>
        0
      </threadId>
      <tname>
        "main"
      </tname>
      <k>
        #Read ( #pair ( #sl ( 2 ) , valcl ( true ) ) ) ~> #freezer#Move1_ ( #write ( #sl ( 2 ) , #uninit ( 0 ) ) ) ~> #freezer#letcl1_ ( var ( 5 ) , clskip ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( ) ~> #freezer#computeFB0_ ( )
      </k>
      <env>
        var ( 0 ) |-> #sl ( 2 )
        var ( 1 ) |-> #sl ( 3 )
      </env>
      <clstack>
        ListItem ( var ( 1 ) )
        ListItem ( var ( 0 ) |-> #sl ( 2 ) )
        ListItem ( var ( 0 ) )
        ListItem ( .Map )
        ListItem ( #state ( . , .Map ) )
      </clstack>
    </Thread>
    <activeThreads>
      SetItem ( 0 )
    </activeThreads>
    <cntThreads>
      1
    </cntThreads>
    <cthread>
      0
    </cthread>
  </threads>
  <closures>
    <closureCnt>
      1
    </closureCnt>
    <funclosure>
      main |-> 0
    </funclosure>
    <closure>
      <crId>
        0
      </crId>
      <crContext>
        .
      </crContext>
      <crParams>
        .Idents
      </crParams>
      <crBody>
        (| letcl var ( 0 ) =cl #AllocateInit ( valcl ( 2 ) , #owner ( #array ( i32 , 2 ) ) , valcl ( V0 ) , valcl ( V1 ) , .ExpCLs ) incl letcl var ( 1 ) =cl valcl ( 5 ) incl ( (| casecl { var ( 1 ) ==cl valcl ( 1 ) -> (| letcl var ( 2 ) =cl valcl ( 1 ) incl #print ( "1" , .ValueCLs ) |) ; var ( 1 ) ==cl valcl ( 5 ) -> (| letcl var ( 3 ) =cl valcl ( 5 ) incl letcl var ( 4 ) =cl #move ( var ( 0 ) ) incl clskip |) ; valcl ( 0 ) -> (| #print ( "n" , .ValueCLs ) |) ; .GuardedActions } |) ;cl clskip ;cl clskip ;cl letcl var ( 5 ) =cl #move ( var ( 0 ) ) incl clskip ) |)
      </crBody>
    </closure>
  </closures>
  <memory>
    <slocAddr>
      6
    </slocAddr>
    <sloc>
      2 |-> #uninit ( 0 )
      3 |-> valcl ( 5 )
    </sloc>
    <blkAddr>
      2
    </blkAddr>
    <blocks>
      .Map
    </blocks>
    <locRW>
      SetItem ( #lread ( #sl ( 2 ) , 7 ) )
      SetItem ( #lread ( #sl ( 2 ) , 10 ) )
      SetItem ( #lread ( #sl ( 3 ) , 4 ) )
      SetItem ( #lread ( #sl ( 3 ) , 5 ) )
      SetItem ( #lwrite ( #sl ( 2 ) , 8 ) )
    </locRW>
    <memStatus>
      #heap ( 1 , 0 ) |-> #ms ( 0 , 0 )
      #heap ( 1 , 1 ) |-> #ms ( 0 , 0 )
      #sl ( 2 ) |-> #ms ( 0 , 0 )
      #sl ( 3 ) |-> #ms ( 0 , 0 )
      #sl ( 4 ) |-> #ms ( 0 , 0 )
      #sl ( 5 ) |-> #ms ( 0 , 0 )
    </memStatus>
    <clk>
      10
    </clk>
  </memory>
  <output>
    .List
  </output>
</T>
Command exited with non-zero status 1
	Command being timed: "./clkprove rust_tests/rv/rduninit/t7-spec.k"
	User time (seconds): 35.40
	System time (seconds): 0.70
	Percent of CPU this job got: 190%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.97
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 843688
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 375948
	Voluntary context switches: 11320
	Involuntary context switches: 808
	Swaps: 0
	File system inputs: 0
	File system outputs: 152048
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1
verifying rust_tests/rv/rduninit/t8-spec.k:
          
[Error] Compiler: Had 1 parsing errors.
[Error] Inner Parser: Parse error: unexpected token ','.
	Source(/home/ksl/workspace/RustSEM/Rust-Semantics/rustsem-java/rust_tests/rv/rduninit/t8-spec.k)
	Location(14,255,14,256)
Command exited with non-zero status 113
	Command being timed: "./clkprove rust_tests/rv/rduninit/t8-spec.k"
	User time (seconds): 16.33
	System time (seconds): 0.52
	Percent of CPU this job got: 171%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.83
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 690188
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 330061
	Voluntary context switches: 6691
	Involuntary context switches: 597
	Swaps: 0
	File system inputs: 0
	File system outputs: 157664
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 113
verifying rust_tests/rv/rduninit/t9-spec.k:
          
[Error] Compiler: Had 2 parsing errors.
[Error] Inner Parser: Parse error: unexpected token ')'.
	Source(/home/ksl/workspace/RustSEM/Rust-Semantics/rustsem-java/rust_tests/rv/rduninit/t9-spec.k)
	Location(57,27,57,28)
[Error] Inner Parser: Scanner error: unexpected character sequence '-'.
	Source(/home/ksl/workspace/RustSEM/Rust-Semantics/rustsem-java/rust_tests/rv/rduninit/t9-spec.k)
	Location(48,11,48,12)
Command exited with non-zero status 113
	Command being timed: "./clkprove rust_tests/rv/rduninit/t9-spec.k"
	User time (seconds): 16.44
	System time (seconds): 0.59
	Percent of CPU this job got: 170%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.97
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 684952
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 329893
	Voluntary context switches: 7168
	Involuntary context switches: 583
	Swaps: 0
	File system inputs: 0
	File system outputs: 163304
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 113
